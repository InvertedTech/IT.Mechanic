@using IT.Mechanic.App.Services.Profiles
@using IT.Mechanic.Models.Configuration
@using IT.Mechanic.App.Components.Data.Profiles
@inject NavigationManager Navigation
@inject IProfileService _profileService

<MudCard Elevation="20" Width="50%" Class="ml-auto mr-auto">
    <MudCardHeader>
        <MudText Typo="Typo.h4">Recent Profiles:</MudText>
    </MudCardHeader>
        <MudCardContent>
        @if (profiles.Any())
        {
            <MudExpansionPanels>
                @foreach(MainModel profile in profiles)
                {
                    <ProfileListItem SiteId="@profile.SiteId" DomainName="@profile.DNS.DomainName" DNSProvider="@profile.DNS.Provider" ServerHost="@profile.Server.HostingProvider"/>
                }
            </MudExpansionPanels>
        }
        else
        {
            <MudText Typo="Typo.h5">Click Add Profile to Get Started!</MudText>
        }
        </MudCardContent>
    <MudCardActions Class="ml-auto mr-auto">
            <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => NavigateToCreateFlow()">Add Profile</MudButton>
        </MudCardActions>
</MudCard>

@code {
    private IEnumerable<MainModel> profiles { get; set; } = new List<MainModel>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        profiles = _profileService.Profiles;
    }

    private void NavigateToProfile(string profileId)
    {
        Navigation.NavigateTo($"/profiles/{profileId}");
    }

    private void NavigateToCreateFlow()
    {
        Navigation.NavigateTo("/create");
    }
}
