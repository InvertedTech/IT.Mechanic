@using IT.Mechanic.App.Services.Profiles

<MudCard Elevation="20">
    <MudCardHeader>
        <MudText>Server Settings</MudText>
    </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Server Name" Required="true" RequiredError="Required" @bind-Value="ServerName" />
            <MudTextField Label="User" Required="true" RequiredError="Required" @bind-Value="User" />
            @if (ExpertMode)
            {
                <MudTextField Mask="@ipv4Mask" Label="Public IP (IPv4)" Required="ExpertMode" RequiredError="Required" @bind-Value="PublicIPv4" />
                <MudTextField Mask="@ipv6Mask" Label="Public IP (IPv6)"  @bind-Value="PublicIPv6" />
                <MudTextField Label="SSH Private Key" Required="ExpertMode" RequiredError="Required" @bind-Value="SSHPrivateKey" />

            }
        </MudCardContent>
        <MudCardActions>
            <MudButtonGroup Variant="Variant.Filled">
                <MudButton Color="Color.Primary" @onclick="OnBackClicked">Back</MudButton>
                <MudButton Color="Color.Secondary" @onclick="OnNextClicked">Next</MudButton>
            </MudButtonGroup>
        </MudCardActions>
    </MudCard>
@code {
    [Parameter]
    public IProfileFactory Factory { get; set; }

    [Parameter]
    public bool ExpertMode { get; set; } = false;

    public string PublicIPv4 { get; set; } = "";
    public string PublicIPv6 { get; set; } = "";
    public string ServerName { get; set; } = "";
    public string User { get; set; } = "";
    public string SSHPrivateKey { get; set; } = "";
    public IMask ipv4Mask = RegexMask.IPv4();
    public IMask ipv6Mask = RegexMask.IPv6();

    protected override void OnInitialized()
    {
        if (Factory.Server.HostingProvider == Models.Configuration.ServerModel.HostingProviderEnum.Expertmode)
        {
            ExpertMode = true;
        }
        base.OnInitialized();
    }

    public void OnBackClicked()
    {
    }

    public void OnNextClicked()
    {
        Factory.SetServerDetails(PublicIPv4, ServerName, User, SSHPrivateKey);
    }
}
