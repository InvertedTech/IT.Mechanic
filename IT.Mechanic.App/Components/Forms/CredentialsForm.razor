@using IT.Mechanic.App.Helpers
@using IT.Mechanic.App.Services.Settings
<MudCard Elevation="20" Class="ml-auto mr-auto">
    <MudCardHeader>
        <MudText>Create @CredentialType Credential</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @ref="_form">
            <MudTextField Label="Name" T="string" @bind-Value="CredentialName" Required="true" RequiredError="Required" />
            @if (CredentialType.Equals(CredentialHelpers.CredentialTypes.Master))
            {
                <MudTextField Label="Master Key" T="string" @bind-Value="MasterKey" Required="true" RequiredError="Required" />
            } else
            {
                <MudTextField Label="API Key" T="string" @bind-Value="ApiKey" Required="true" RequiredError="Required" />
                <MudTextField Label="API Secret" T="string" @bind-Value="ApiSecret" Required="true" RequiredError="Required" />
            }
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="@ButtonColor" @onclick="OnSaveClicked" StartIcon="@ButtonIcon" Disabled="@(!IsSuccess)">
            <MudText Typo="Typo.button">@ButtonText</MudText>
            </MudButton>
        </MudCardActions>
    </MudCard>

    @code {
    [Parameter]
    public ICredentialService CredentialService { get; set; }

    [Parameter]
    public CredentialHelpers.CredentialTypes CredentialType { get; set; } = CredentialHelpers.CredentialTypes.GoDaddy;

    public string CredentialName { get; set; } = string.Empty;
    public string ApiKey { get; set; } = string.Empty;
    public string ApiSecret { get; set; } = string.Empty;
    public string MasterKey { get; set; } = string.Empty;
    public bool IsSuccess { get; set; } = false;
    public string ButtonIcon => IsSuccess ? @Icons.Material.Filled.Check : Icons.Material.Filled.Save;
    public Color ButtonColor => IsSuccess ? Color.Success : Color.Secondary;
    public string ButtonText => IsSuccess ? "Success" : "Save";
    public bool IsMaster => CredentialType.Equals(CredentialHelpers.CredentialTypes.Master) ? true : false;

    private MudForm _form;

    private async void OnSaveClicked()
    {
        var model = CredentialHelpers.BuildCredentials(CredentialType, ApiKey, ApiSecret, MasterKey);

        if (model != null)
        {
            await CredentialService.AddCredentialAsync(CredentialName, CredentialType, model);
        }
    }
}
