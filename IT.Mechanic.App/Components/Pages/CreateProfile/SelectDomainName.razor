@using IT.Mechanic.App.Services.Profiles
@using IT.Mechanic.App.Services.Settings
@using IT.Mechanic.Models.Configuration
@using IT.Mechanic.Models.Configuration.App
@using IT.Mechanic.Models.Configuration.Credentials
@page "/create/select-domain-name"
@inject IProfileFactory ProfileFactory;
@inject ICredentialService CredentialService;
@inject NavigationManager Navigation;

<MudText Typo="Typo.h4">@($"Select Domains From {CredentialProvider}")</MudText>
<MudPaper Width="300">
    <MudSelect T="string" @bind-Value="SelectedDomain" Label="Domain Names">
        @foreach (var name in Domains)
        {
            <MudSelectItem Value="@name">@name</MudSelectItem>
        }
    </MudSelect>
</MudPaper>
<MudButtonGroup Variant="Variant.Filled">
    <MudButton Color="Color.Primary" @onclick="OnBackClicked">Back</MudButton>
    @if(!string.IsNullOrEmpty(SelectedDomain))
    {
        <MudButton Color="Color.Secondary" @onclick="OnNextClicked">Next</MudButton>
    }
</MudButtonGroup>

@code {
    [Parameter, SupplyParameterFromQuery(Name = "provider")]
    public string CredentialProvider { get; set; } = DNSModel.ProviderEnum.Godaddy.ToString();
    public string? SelectedDomain { get; set; }
    public List<string> Domains { get; set; } = ["example.com"];

    public void OnBackClicked()
    {
        Navigation.NavigateTo("/create/select-dns-credentials");
    }

    public void OnNextClicked()
    {
        ProfileFactory.DNS.DomainName = SelectedDomain;
        Navigation.NavigateTo("/create/select-server-host");
    }
}
