@using IT.Mechanic.App.Services.Profiles
@using IT.Mechanic.App.Services.Settings
@using IT.Mechanic.Models.Configuration
@using IT.Mechanic.Models.Configuration.App
@using IT.Mechanic.Models.Configuration.Credentials
@page "/create/select-credentials"
@inject IProfileFactory ProfileFactory;
@inject ICredentialService CredentialService;
@inject NavigationManager Navigation;

<MudText Typo="Typo.h4">Select DNS Credentials</MudText>
<MudPaper Width="300">,
    @if (!string.IsNullOrEmpty(CredentialProvider))
    {
        <MudText Typo="Typo.h5">@CredentialProvider</MudText>
    }
    <MudSelect T="CredentialRecord<GodaddyModel>" Label=@($"Saved {CredentialProvider} Credentials") @bind-Value="SelectedCredential">
        @foreach(var credential in CredentialsList)
        {
            <MudSelectItem Value="@credential">@credential.CredentialName</MudSelectItem>
        }
    </MudSelect>
    <MudButtonGroup Variant="Variant.Filled">
        <MudButton Color="Color.Primary" @onclick="OnBackClicked">Back</MudButton>
        @if (SelectedCredential != null)
        {
            <MudButton Color="Color.Secondary" @onclick="OnNextClicked">Next</MudButton>
        } else
        {
            <MudButton @onclick="OnCreateClicked" Color="Color.Secondary">Create New?</MudButton>
        }
    </MudButtonGroup>
</MudPaper>

@code {
    [Parameter, SupplyParameterFromQuery(Name = "provider")]
    public string CredentialProvider { get; set; } = DNSModel.ProviderEnum.Godaddy.ToString();
    public List<CredentialRecord<GodaddyModel>> CredentialsList { get; set; } = new List<CredentialRecord<GodaddyModel>>();
    public bool IsNewToggled { get; set; }
    public CredentialRecord<GodaddyModel>? SelectedCredential;

    protected override void OnInitialized()
    {
        if (CredentialProvider == DNSModel.ProviderEnum.Godaddy.ToString())
        {
            CredentialsList = CredentialService.CredentialsState.GodaddyCredentials.ToList();
        }
        base.OnInitialized();
    }

    public void OnBackClicked()
    {
        Navigation.NavigateTo("/create/sselect-dns-host");
    }

    public void OnNextClicked()
    {
        if (SelectedCredential != null)
        {
            ProfileFactory.Credentials.Add(SelectedCredential.Credentials);
            Navigation.NavigateTo("/create/select-server-host");
        }
    }

    public void OnCreateClicked()
    {
        string from = $"/create/select-credentials?provider={CredentialProvider}";
        Navigation.NavigateTo($"/credentials/{CredentialProvider}?from={from}&redirect={from}");
    }
}
