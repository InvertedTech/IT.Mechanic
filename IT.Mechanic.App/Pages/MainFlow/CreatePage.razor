@page "/create"
@using FluentValidation
@using IT.Mechanic.App.Services.Profiles
@using IT.Mechanic.App.ViewModels
@using IT.Mechanic.Models.Configuration
@inject IProfileFactory ProfileFactory
@inject NavigationManager Navigation;
@inject IValidator<SiteConfigViewModel> Validator

<MudAppBar>
    <MudTooltip Text="Back">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"  @onclick="OnBackClicked"/>
    </MudTooltip>
    <MudText>Create Your Platform</MudText>
</MudAppBar>
@if (ShowFormErrorAlert)
{
    <MudAlert Severity="MudBlazor.Severity.Error" ContentAlignment="HorizontalAlignment.End" ShowCloseIcon="true">End</MudAlert>
}
<SiteConfigForm DNSProvider="@ViewModel.DNSProvider" 
                DNSProviderChanged="@DNSProviderChanged"
                HostingProvider="@ViewModel.HostingProvider"
                HostingProviderChanged="@HostingProviderChanged"
                WebsiteType="@ViewModel.WebsiteType"
                WebsiteTypeChanged="@WebsiteTypeChanged"
                Navigation="Navigation" NextRoute="@("/create/dns")"/>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnCreateClicked" StartIcon="@Icons.Material.Filled.Add">
    <MudText Typo="Typo.button">Create</MudText>
</MudButton>

@code {
    public bool ShowFormErrorAlert { get; set; } = false;
    public SiteConfigViewModel ViewModel { get; set; } = new SiteConfigViewModel();

    protected override void OnInitialized()
    {
        ProfileFactory.Clear();
        ViewModel.DNSProvider = ProfileFactory.DNS.Provider;
        ViewModel.HostingProvider = ProfileFactory.Server.HostingProvider;
        ViewModel.WebsiteType = ProfileFactory.ProductSelection.WebsiteType;
        base.OnInitialized();
    }

    private void OnBackClicked()
    {
        Navigation.NavigateTo("/");
    }

    public void DNSProviderChanged(DNSModel.ProviderEnum dnsProvider)
    {
        ViewModel.DNSProvider = dnsProvider;
    }

    public void HostingProviderChanged(ServerModel.HostingProviderEnum hostingProvider)
    {
        ViewModel.HostingProvider = hostingProvider;
    }

    public void WebsiteTypeChanged(ProductSelectionModel.WebsiteTypes websiteType)
    {
        ViewModel.WebsiteType = websiteType;
    }

    public void OnCreateClicked()
    {
        ShowFormErrorAlert = false;
        var res = Validator.Validate(ViewModel);

        if (res.IsValid)
        {
            ProfileFactory.DNS.Provider = ViewModel.DNSProvider;
            ProfileFactory.Server.HostingProvider = ViewModel.HostingProvider;
            ProfileFactory.ProductSelection.WebsiteType = ViewModel.WebsiteType;
            Navigation.NavigateTo("/create/dns");
        } else
        {
            // TODO: Parse Errors in res and push to the form
            ShowFormErrorAlert = true;
        }
    }
}
