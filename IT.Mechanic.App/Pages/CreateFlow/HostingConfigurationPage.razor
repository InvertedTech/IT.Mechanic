@page "/create/hosting"
@using IT.Mechanic.App.Services.Profiles
@using IT.Mechanic.App.Services.Settings
@using IT.Mechanic.App.Components.Pickers;
@using IT.Mechanic.Models.Configuration
@using IT.Mechanic.Models.Configuration.Credentials
@inject NavigationManager Navigation
@inject IProfileFactory ProfileFactory
@inject ICredentialService Credentials
@inject IProfileService Profiles

<MudAppBar>
    <MudText>Configure Your Server</MudText>
</MudAppBar>
<MudTabs @ref="Tabs">
    <MudTabPanel Text="Provider" @ref="ProviderTab">
        <MudCard Class="mr-auto ml-auto" Elevation="20">
            <MudCardHeader>
                <MudText>Select Server Provider</MudText>
            </MudCardHeader>
            <MudCardContent>
                <IT.Mechanic.App.Components.Pickers.ServerHostPicker HostingProvider="@ProfileFactory.Server.HostingProvider"
                                                                     HostingProviderChanged="@HostingProviderChanged" />
            </MudCardContent>
            <MudCardActions>
                <MudButton @onclick="OnBackClicked">
                    <MudText Typo="@Typo.button">Back</MudText>
                </MudButton>
                <MudButton @onclick="() => Activate(1)">
                    <MudText Typo="@Typo.button">Next</MudText>
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudTabPanel>
    <MudTabPanel Text="Provider Configuration" @ref="ProviderConfigurationTab">
        <MudCard Class="mr-auto ml-auto" Elevation="20">
            <MudCardHeader>
                <MudText>Configure Server Provider</MudText>
            </MudCardHeader>
            <MudCardContent>
                @* <HostingForm Provider="@ProfileFactory.Server.HostingProvider"/> *@
                @if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Rumble)
                {
                    <IT.Mechanic.App.Components.Forms.Hosting.RumbleHostDetailsForm RumbleHostModel="@RumbleHostingModel"  RumbleHostModelChanged="@RumbleHostingDetailsChanged"/>
                }
                else if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Azure)
                {
                    <IT.Mechanic.App.Components.Forms.Hosting.AzureHostDetailsForm AzureHostModel="@AzureHostingModel" AzureHostModelChanged="@AzureHostingDetailsChanged" />
                }
                else if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Digitalocean)
                {
                    <IT.Mechanic.App.Components.Forms.Hosting.DigitalOceanHostDetailsForm DigitalOceanHostModel="@DigitalOceanHostingModel" DigitalOceanHostModelChanged="@DigitalOceanHostingDetailsChanged" />                   
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton @onclick="() => Activate(0)">
                    <MudText Typo="@Typo.button">Back</MudText>
                </MudButton>
                <MudButton @onclick="() => Activate(2)">
                    <MudText Typo="@Typo.button">Next</MudText>
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudTabPanel>
    <MudTabPanel Text="Credentials" @ref="CredentialsTab">
        <MudCard Class="mr-auto ml-auto" Elevation="20">
            <MudCardHeader>
                <MudText>Select Credentials For @ProfileFactory.Server.HostingProvider</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Rumble)
                {
                    // RUMBLE
                    <RumbleCredentialsPicker CredentialService="@Credentials" RumbleModelValue="@SelectedRumbleCredential" RumbleModelValueChanged="@SelectedRumbleCredentialChanged"/>
                } else if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.AWS)
                {
                    // AWS
                    <AWSCredentialsPicker CredentialsService="@Credentials" AWSModelValue="@SelectedAWSCredential" AWSModelValueChanged="@SelectedAWSCredentialChanged" />
                } else if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Azure)
                {
                    // AZURE
                    <AzureCredentialsPicker CredentialsService="@Credentials" AzureModelValue="@SelectedAzureCredential" AzureModelValueChanged="@SelectedAzureCredentialChanged" />
                } else if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Digitalocean)
                {
                    // DigitalOcean
                    <DigitalOceanCredentialsPicker CredentialsService="@Credentials" DigitalOceanModelValue="@SelectedDigitalOceanCredential" DigitalOceanModelValueChanged="@SelectedDigitalOceanCredentialChanged" />
                } 
                else if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.GCP)
                {
                    <GCPCredentialsPicker CredentialService="@Credentials" GCPModelValue="@SelectedGCPCredential" GCPModelValueChanged="@SelectedGCPChanged" />
                }
                else if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Invertedtech)
                {
                    <InvertedTechCredentialsPicker CredentialService="@Credentials" InvertedTechModelValue="@SelectedInvertedTechCredential" InvertedTechModelValueChanged="@SelectedInvertedTechCredentialChanged" />
                }
            </MudCardContent>
            <MudCardActions>
                    <MudButton @onclick="() => Activate(1)">
                        <MudText Typo="@Typo.button">Back</MudText>
                    </MudButton>
                    <MudButton @onclick="() => Activate(3)">
                        <MudText Typo="@Typo.button">Next</MudText>
                    </MudButton>
            </MudCardActions>
        </MudCard>
    </MudTabPanel>
    <MudTabPanel Text="Configure" @ref="ConfigureTab">
        <MudCard Class="mr-auto ml-auto" Elevation="20">
                <MudCardHeader>
                    <MudText>Configure Server</MudText>
            </MudCardHeader>
                <MudCardContent>
                    <ServerSettingsForm PublicIPv4="@ProfileFactory.Server.PublicIP"
                                        PublicIPv4Changed="@PublicIPv4Changed"
                                        User="@ProfileFactory.Server.User"
                                        UserChanged="@UserChanged"
                                        ServerName="@ProfileFactory.Server.ServerName"
                                        ServerNameChanged="@ServerNameChanged"
                                        SSHPrivateKey="@ProfileFactory.Server.SSHPrivateKey"
                                        SSHPrivateKeyChanged="@SSHPrivateKeyChanged" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton @onclick="() => Activate(2)">
                        <MudText Typo="@Typo.button">Back</MudText>
                    </MudButton>
                    <MudButton @onclick="OnNextClicked">
                        <MudText Typo="@Typo.button">Next</MudText>
                    </MudButton>
                </MudCardActions>
        </MudCard>
    </MudTabPanel>
</MudTabs>

@code {
    private MudTabs Tabs;
    private MudTabPanel ProviderTab;
    private MudTabPanel ProviderConfigurationTab;
    private MudTabPanel CredentialsTab;
    private MudTabPanel ConfigureTab;
    private bool ShowServerSettingsForm { get; set; } = false;
    private bool ShowCredentialsForm { get; set; } = false;
    public IT.Mechanic.Models.Configuration.Credentials.RumbleModel SelectedRumbleCredential { get; set; }
    public IT.Mechanic.Models.Configuration.Credentials.AWSModel SelectedAWSCredential { get; set; }
    public IT.Mechanic.Models.Configuration.Credentials.AzureModel SelectedAzureCredential { get; set; }
    public IT.Mechanic.Models.Configuration.Credentials.DigitalOceanModel SelectedDigitalOceanCredential { get; set; }
    public IT.Mechanic.Models.Configuration.Credentials.GCPModel SelectedGCPCredential { get; set; }
    public IT.Mechanic.Models.Configuration.Credentials.InvertedTechModel SelectedInvertedTechCredential { get; set; }
    public IT.Mechanic.Models.Configuration.Hosting.RumbleModel RumbleHostingModel { get; set; } = new();
    public IT.Mechanic.Models.Configuration.Hosting.AzureModel AzureHostingModel { get; set; } = new();
    public IT.Mechanic.Models.Configuration.Hosting.DigitalOceanModel DigitalOceanHostingModel { get; set; } = new();

    private void Activate(int index)
    {
        Tabs.ActivatePanel(index);
    }

    private void OnBackClicked()
    {
        Navigation.NavigateTo("/create/dns");
    }

    private void SetCredentials()
    {
        if (SelectedRumbleCredential != null)
        {
            ProfileFactory.Credentials.Add(SelectedRumbleCredential);
        }
        else if (SelectedAWSCredential != null)
        {
            ProfileFactory.Credentials.Add(SelectedAWSCredential);
        }
        else if (SelectedAzureCredential != null)
        {
            ProfileFactory.Credentials.Add(SelectedAzureCredential);
        }
        else if (SelectedDigitalOceanCredential != null)
        {
            ProfileFactory.Credentials.Add(SelectedDigitalOceanCredential);
        }
        else if (SelectedGCPCredential != null)
        {
            ProfileFactory.Credentials.Add(SelectedGCPCredential);
        }
        else if (SelectedInvertedTechCredential != null)
        {
            ProfileFactory.Credentials.Add(SelectedInvertedTechCredential);
        }
    }

    private void SetHostingDetails()
    {
        if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Rumble)
        {
            ProfileFactory.Server.HostingDetails = RumbleHostingModel;
        }
        else if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Azure)
        {
            ProfileFactory.Server.HostingDetails = AzureHostingModel;
        }
        else if (ProfileFactory.Server.HostingProvider == ServerModel.HostingProviderEnum.Digitalocean)
        {
            ProfileFactory.Server.HostingDetails = DigitalOceanHostingModel;
        }
    }

    private void OnNextClicked()
    {
        SetCredentials();
        SetHostingDetails();

        Navigation.NavigateTo("/create/review");
    }

    public void HostingProviderChanged(ServerModel.HostingProviderEnum hostingProvider)
    {
        ProfileFactory.Server.HostingProvider = hostingProvider;
    }

    public void PublicIPv4Changed(string ipv4)
    {
        ProfileFactory.Server.PublicIP = ipv4;
    }

    public void ServerNameChanged(string name)
    {
        ProfileFactory.Server.ServerName = name;
    }

    public void UserChanged(string user)
    {
        ProfileFactory.Server.User = user;
    }

    public void SSHPrivateKeyChanged(string key)
    {
        ProfileFactory.Server.SSHPrivateKey = key;
    }

    public void SelectedRumbleCredentialChanged(RumbleModel model)
    {
        SelectedRumbleCredential = model;
    }

    public void SelectedAWSCredentialChanged(AWSModel model)
    {
        SelectedAWSCredential = model;
    }

    public void SelectedAzureCredentialChanged(AzureModel model)
    {
        SelectedAzureCredential = model;
    }

    public void SelectedDigitalOceanCredentialChanged(DigitalOceanModel model)
    {
        SelectedDigitalOceanCredential = model;
    }

    public void SelectedGCPChanged(GCPModel model)
    {
        SelectedGCPCredential = model;
    }

    public void SelectedInvertedTechCredentialChanged(InvertedTechModel model)
    {
        SelectedInvertedTechCredential = model;
    }

    public void RumbleHostingDetailsChanged(IT.Mechanic.Models.Configuration.Hosting.RumbleModel model )
    {
        RumbleHostingModel = model;
    }

    public void AzureHostingDetailsChanged(IT.Mechanic.Models.Configuration.Hosting.AzureModel model)
    {
       AzureHostingModel = model;
    }

    public void DigitalOceanHostingDetailsChanged(IT.Mechanic.Models.Configuration.Hosting.DigitalOceanModel model)
    {
       DigitalOceanHostingModel = model;
    }
}
